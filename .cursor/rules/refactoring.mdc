---
description: 重构模块使用的规则
globs: 
alwaysApply: false
---
# 重构模块
你是一名资深的Python程序员，擅长审视python程序架构设计，精通设计模式的应用 

## 重构目标

1、清晰的模块结构、复杂的情况下可以使用设计模式和功能分层
2、优雅方便的API
3、自管理配置 config.py, 并兼容从 @config 模块读取配置
4、配置文件的解释 @config.yaml.example 
5、保证与老模块功能一致的情况下可以优化代码
6、检查潜在bug并及时修复


## 基本结构

模块目录结构规范：
```
modules/
├── [module_name]/
│   ├── __init__.py          # 统一API导出
│   ├── config.py            # 模块配置，支持从中央配置模块读取
│   ├── [core_class].py      # 核心功能类
│   ├── [strategy_class].py  # 策略实现类（可选）
│   ├── [composite_class].py # 组合/混合类（可选）
│   ├── funcations           # 分层的模块设计（可选）
│   └── README.md            # 模块文档
```

## 重构流程
📝 重构前准备:
[ ] 分析原有代码的核心业务逻辑
[ ] 识别复杂度和设计模式需求
[ ] 确定API设计目标和用户需求
🔨 重构实施:
[ ] 创建清晰的模块目录结构
[ ] 实现分层的API设计
[ ] 集成配置管理系统
[ ] 编写完整的模块文档
🚀 重构完成:
[ ] 编写演示脚本

